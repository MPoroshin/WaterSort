import sys, mathimport pygame as pgpg.init()pg.font.init()width = 1280height = 720screen = pg.display.set_mode((width, height),pg.FULLSCREEN)  #pg.display.set_caption('Игра Переливание')class Flasks():	"""  x,y - left upper corner  """	global key	def __init__(self,x,y,flask_list,Flask):		self.x = x		self.y = y		self.flask_list = flask_list		self.Flask = Flask		self.x_for_circle = x+33		self.y_for_circle = y+245	def Fill_Flasks(self, c):		global THECOLORS		if c == -1:			k = 39*4			for i in self.flask_list:				pg.draw.rect(screen, THECOLORS[i],(self.x+18,self.y+k+25,58,39))				k-=39		else:			k = 39*4			for i in self.flask_list:				if c <= 0: break				pg.draw.rect(screen, THECOLORS[i],(self.x+18,self.y+k+25,58,39))				k-=39				c-=1					def DrawFlask(self):		screen.blit(self.Flask,(self.x+17,self.y+13))	def ButtonFlask(self):		global flaskkey		global image		mouse_pos = pg.mouse.get_pos()		mouse_press = pg.mouse.get_pressed()		if (mouse_pos[0] >=self.x) and (mouse_pos[0] <=self.x+93) and (mouse_pos[1] >=self.y+10) and (mouse_pos[1] <=self.y+231):			if mouse_press[0] == True:				flaskkey = self				pg.time.delay(250)class Button():	"""  x,y - left upper corner  """	global key	global click_music	def __init__(self,x,y,action,active_image,inactive_image,length,height):		self.x = x		self.y = y		self.action = action		self.active_image = active_image		self.inactive_image = inactive_image		self.length = length		self.height = height			def DrawButtonAndGetAction(self):		global click_music		global key		mouse_pos = pg.mouse.get_pos()		mouse_press = pg.mouse.get_pressed()		if (mouse_pos[0] >=self.x) and (mouse_pos[0] <=self.x+self.length) and (mouse_pos[1] >=self.y) and (mouse_pos[1] <=self.y+self.height):			screen.blit(self.active_image,(self.x,self.y+1))			if mouse_press[0] == True:				click_music.play()				key = self.action				pg.time.delay(300)		else:			screen.blit(self.inactive_image,(self.x,self.y))def Drawlvl(button_back, Button_again, lvl_item, flasks_activity_list, flag):	global THECOLORS	"""false - для анимации, True - для статичной картинки"""	screen.fill((71,74,81))			if flag == False:		for i in lvl_item:			if (i != flasks_activity_list[0]) and (i != flasks_activity_list[1]):				i.Fill_Flasks(-1)			else:				if (i == flasks_activity_list[1]):					i.Fill_Flasks(len(flasks_activity_list[1].flask_list)-1)				elif (i == flasks_activity_list[0]):					i.Fill_Flasks(len(flasks_activity_list[0].flask_list))							i.DrawFlask()	else:		for i in lvl_item:			i.Fill_Flasks(-1)			i.DrawFlask()			i.ButtonFlask()	for i in lvl_item:		screen.blit(Inactive_flask_button,(i.x_for_circle,i.y_for_circle))	if len(flasks_activity_list) > 0:		screen.blit(Active_flask_button,(flasks_activity_list[0].x_for_circle,flasks_activity_list[0].y_for_circle))	if len(flasks_activity_list) > 1:		screen.blit(Active_flask_button,(flasks_activity_list[1].x_for_circle,flasks_activity_list[1].y_for_circle))	button_back.DrawButtonAndGetAction()	Button_again.DrawButtonAndGetAction()def Animation(color,pos_del,button_back, Button_again, lvl_item, flasks_activity_list):	global key	global colors_dict	global THECOLORS	global water_sound_up, water_sound_down	dist = abs(flasks_activity_list[0].x - flasks_activity_list[1].x)	up_value = (flasks_activity_list[0].y+25+pos_del - flasks_activity_list[0].y) - 16   #на сколько двигать вверх?	down_value = (5 - len(flasks_activity_list[1].flask_list)     )*39 + 17#на сколько двигать вниз?	pos_fill = -15-39	k1 = 0	k2 = 0	"""Движение по колбе вверх"""		for _ in range(1,up_value+1+39,3):		for event in pg.event.get():			if event.type == pg.QUIT:				pg.quit()				sys.exit()		Drawlvl(button_back, Button_again, lvl_item, flasks_activity_list, False)			if _ < 40:			pg.draw.rect(screen, THECOLORS[color],(flasks_activity_list[0].x+18,flasks_activity_list[0].y+25+pos_del-k1,58,39))		else:			pg.draw.circle(screen, THECOLORS[color],(flasks_activity_list[0].x+18+58//2,flasks_activity_list[0].y+25+pos_del-k1+39//2),58//2, 58//2)		k1 += 3		flasks_activity_list[0].DrawFlask()		if key is not None:			break		pg.time.delay(1)		pg.display.update()		water_sound_up.play()	"""Движение по колбе вверх"""	"""  движение по траектории  """		R_horiz = dist//2	R_vertik = dist//4	delay = dist//100+5	 	if (flasks_activity_list[0].x - flasks_activity_list[1].x) < 0:    # 150 - 900		X0 = flasks_activity_list[0].x + 18 + R_horiz		Y0 = flasks_activity_list[0].y - 39 - 15		a =-3.12		angle = 360		while a <= 0.0:			for event in pg.event.get():				if event.type == pg.QUIT:					pg.quit()					sys.exit()			Drawlvl(button_back, Button_again, lvl_item, flasks_activity_list, False)			X = int( ( R_horiz * math.cos(a)  ) + X0)			Y = int( ( R_vertik * math.sin(a)  ) + Y0)			#pg.draw.rect(screen, THECOLORS[color], (X, Y, 58, 39) )			#pg.draw.circle(screen, THECOLORS[color], (X+58//2, Y+58//2), 58//2, 58//2)			#screen.blit(colors_dict[color],(X,Y))			#flasks_activity_list[0].DrawFlask()			#flasks_activity_list[1].DrawFlask()									x_center = X + 600//10//2  #600//10, 780//10			y_center = Y + 780//10//2			rotated_image = pg.transform.rotate(colors_dict[color],angle)			rect = rotated_image.get_rect()			rect.center = (x_center, y_center)			screen.blit(rotated_image, rect)			flasks_activity_list[0].DrawFlask()			flasks_activity_list[1].DrawFlask()			angle -=6			a += 0.1   			if key is not None:				break			pg.time.delay(delay)			pg.display.update()	else:		X0 = flasks_activity_list[1].x + 18 + R_horiz		Y0 = flasks_activity_list[1].y - 39 - 15		a =0.0		angle = 0		while a >= -3.1:			for event in pg.event.get():				if event.type == pg.QUIT:					pg.quit()					sys.exit()			Drawlvl(button_back, Button_again, lvl_item, flasks_activity_list, False)			X = int( ( R_horiz * math.cos(a) )  + X0)			Y = int( ( R_vertik * math.sin(a) )  + Y0)			#pg.draw.rect(screen, THECOLORS[color], (X, Y, 58, 39) )			x_center = X + 600//10//2  #600//10, 780//10			y_center = Y + 780//10//2			rotated_image = pg.transform.rotate(colors_dict[color],angle)			rect = rotated_image.get_rect()			rect.center = (x_center, y_center)			screen.blit(rotated_image, rect)			flasks_activity_list[0].DrawFlask()			flasks_activity_list[1].DrawFlask()			angle +=6			a -= 0.1			if key is not None:				break			pg.time.delay(delay)			pg.display.update()	"""  движение по траектории  """	"""Движение по колбе вниз"""		for _ in range(1,down_value+1+39,3):		for event in pg.event.get():			if event.type == pg.QUIT:				pg.quit()				sys.exit()		Drawlvl(button_back, Button_again, lvl_item, flasks_activity_list, False)		flasks_activity_list[0].DrawFlask()		if _ > down_value:			pg.draw.rect(screen, THECOLORS[color], (flasks_activity_list[1].x+18,flasks_activity_list[1].y+25 + pos_fill + k2,58,39))		else:			pg.draw.circle(screen, THECOLORS[color],(flasks_activity_list[1].x+18+58//2,flasks_activity_list[1].y+25+pos_fill+ k2+39//2),58//2, 58//2)		k2 += 3		flasks_activity_list[1].DrawFlask()		if key is not None:			break		pg.time.delay(1)		pg.display.update()	water_sound_down.play()		pg.time.delay(250)	"""Движение по колбе вниз"""			def SwapFlasks(button_back, Button_again, lvl_item, flasks_activity_list):	i = flasks_activity_list[0].flask_list[-1]	pos_del = (39* 5) - (39 *  len(flasks_activity_list[0].flask_list))	color = flasks_activity_list[0].flask_list[-1]	while (i == flasks_activity_list[0].flask_list[-1]) and (len(flasks_activity_list[1].flask_list) <5):		flasks_activity_list[1].flask_list.append(flasks_activity_list[0].flask_list[-1])		del flasks_activity_list[0].flask_list[-1]		Animation(color,pos_del,button_back, Button_again, lvl_item, flasks_activity_list)		pos_del+=39		if len(flasks_activity_list[0].flask_list) == 0:			break	def lvl(lvl_item,link_on_lvl):	screen.fill((71,74,81))	pg.display.update()	global r, key, run, flaskkey, flasks_activity_list, rotated_image_list, flask_error_sound	flasks_activity_list = []	button_back = Button(10,10,"level_menu",Button_back_active,Button_back_inactive,150,85)	Button_again = Button(width-150,height-710,link_on_lvl,Button_again_active,Button_again_inactive,135,105) #width-135-10, height-(height-10)	run = True	key = None	flag_win = True	fill_flask_count = 0	while run == True:		for event in pg.event.get():			if event.type == pg.QUIT:				pg.quit()				sys.exit()		if flaskkey is not None:			flasks_activity_list.append(flaskkey)			flaskkey = None				if (len(flasks_activity_list)>1) and ((len(list(set(flasks_activity_list)))) == 1):			flasks_activity_list = []		Drawlvl(button_back, Button_again, lvl_item, flasks_activity_list, True)				if (len(flasks_activity_list) > 1):			if (len(flasks_activity_list[0].flask_list) != 0):				if (len(flasks_activity_list[1].flask_list) != 5):					if ((len(flasks_activity_list[0].flask_list) == 5) and (len(list(set(flasks_activity_list[0].flask_list)))==1)) is not True:						if (len(flasks_activity_list[1].flask_list) == 0) or (flasks_activity_list[0].flask_list[-1] == flasks_activity_list[1].flask_list[-1]):							SwapFlasks(button_back, Button_again, lvl_item, flasks_activity_list)							fill_flask_count = 0							for i in lvl_item:								if ((len(list(set(i.flask_list))) == 1) and (len(i.flask_list) == 5)) or (len(i.flask_list) == 0):									fill_flask_count+=1							flasks_activity_list = []							pg.display.update()						else:							flask_error_sound.play()							screen.blit(Flask_error,(flasks_activity_list[0].x+17,flasks_activity_list[0].y+13))							screen.blit(Flask_error,(flasks_activity_list[1].x+17,flasks_activity_list[1].y+13))							pg.display.update()														pg.time.delay(500)							flasks_activity_list = []					else:						flask_error_sound.play()						screen.blit(Flask_error,(flasks_activity_list[0].x+17,flasks_activity_list[0].y+13))						screen.blit(Flask_error,(flasks_activity_list[1].x+17,flasks_activity_list[1].y+13))						pg.display.update()												pg.time.delay(500)						flasks_activity_list = []										else:					flask_error_sound.play()					screen.blit(Flask_error,(flasks_activity_list[0].x+17,flasks_activity_list[0].y+13))					screen.blit(Flask_error,(flasks_activity_list[1].x+17,flasks_activity_list[1].y+13))					pg.display.update()										pg.time.delay(500)					flasks_activity_list = []			else:				flask_error_sound.play()				screen.blit(Flask_error,(flasks_activity_list[0].x+17,flasks_activity_list[0].y+13))				screen.blit(Flask_error,(flasks_activity_list[1].x+17,flasks_activity_list[1].y+13))				pg.display.update()								pg.time.delay(500)				flasks_activity_list = []							if fill_flask_count == len(lvl_item):			for i in lvl_item:				screen.blit(Active_flask_button,(i.x_for_circle,i.y_for_circle))				if flag_win == True:					win_sound.play()					flag_win = False				screen.blit(Win_text,(width//2-800//2+50,height//2-225))		if key is not None:			run = False		pg.display.update()		pg.time.delay(1)def Main_Menu():	global key	global run	global volume_key	global reg_flag	global Reg	global open_reg	global close_reg	f1 = pg.font.SysFont("Monotype Corsiva",21)	t = ["Выберете колбу, из которой вы хотите перелить",	     " цветную воду, нажав на нее. На игровом поле",		 " загорится соответствующий выбранной колбе",		 "индикатор. Выберете вторую колбу, в которую вы",		 "хотите перелить цветную воду из первой колбы",		 "нажав на нее. На игровом поле загорится второй",		 "соответствующийвыбранной колбе индикатор,",		 "и произойдет процесс переливания. Вы можете",		 " переливать воду из первой колбы только в том",		 "случае, если перемещаемая жидкость имеет такой",		 "же цвет, как у первого элемента(жидкости) во",		 "второй колбе, при этом первая колба не может",		 "быть пустой, а вторая колба не может быть",		 " полной. Можно перемещать сразу несколько",		 "  элементов  одного цвета, если во второй",		 "   колбе для них хватает места. Победа",		 "  начисляется, если жидкость каждого",		 "   цвета находится в отдельной колбе."		 ]	screen.fill((71,74,81))		pg.display.update()	button_play = Button(width//2-350//2,height//2-350//2+50,"level_menu",Button_play_active,Button_play_inactive,320,120)	button_exit = Button(width//2-250//2,height//2-250//2+150,"exit",Button_exit_active,Button_exit_inactive,220,90)	button_volume_play = Button(10,10,"volume",Volume_play_active,Volume_play_inactive,150,85)	button_volume_pause = Button(10,10,"volume",Volume_pause_active,Volume_pause_inactive,150,85)	Button_reg = Button(width-120,height-710,"reg",Button_reg_active,Button_reg_inactive,110,85)	key = None	run = True	while run == True:		for event in pg.event.get():			if event.type == pg.QUIT:				pg.quit()				sys.exit()		screen.fill((71,74,81))				Button_reg.DrawButtonAndGetAction()		if volume_key == True:			button_volume_play.DrawButtonAndGetAction()		else:			button_volume_pause.DrawButtonAndGetAction()		if key == "reg":			if reg_flag == True:				pg.time.delay(50)				open_reg.play()				reg_flag = False			else:				reg_flag = True				close_reg.play()			key = None		v = 110		if reg_flag == True:			screen.blit(Reg, (width-910,10))			for i in t:				text = f1.render(i, True,(0, 0, 0))				screen.blit(text, (width-820, v))				v+=30		else:			button_play.DrawButtonAndGetAction()			button_exit.DrawButtonAndGetAction()					if key == "volume":			if volume_key == True:				pg.mixer.music.pause()				volume_key = False				key = None			else:				pg.mixer.music.unpause()				volume_key = True				key = None		if key is not None:			run = False		pg.display.update()		pg.time.delay(10)	def Levels():	global key	global run	screen.fill((71,74,81))	pg.display.update()	key = None	run = True	button_back = Button(10,10,"main",Button_back_active,Button_back_inactive,150,85)		button_lvl1 = Button(width-(width-150),height-320,"lvl1",lvl1_active,lvl1_inactive,155,140)  #height width	button_lvl2 = Button(width-(width-350),height-320,"lvl2",lvl2_active,lvl2_inactive,155,140)	button_lvl3 = Button(width-(width-550),height-320,"lvl3",lvl3_active,lvl3_inactive,155,140)	button_lvl4 = Button(width-(width-750),height-320,"lvl4",lvl4_active,lvl4_inactive,155,140)	button_lvl5 = Button(width-(width-950),height-320,"lvl5",lvl5_active,lvl5_inactive,155,140)	while run == True:		for event in pg.event.get():			if event.type == pg.QUIT:				pg.quit()				sys.exit()		screen.fill((71,74,81))		button_back.DrawButtonAndGetAction()		screen.blit(Level_menu_text,(100,200))				button_lvl1.DrawButtonAndGetAction()		button_lvl2.DrawButtonAndGetAction()		button_lvl3.DrawButtonAndGetAction()		button_lvl4.DrawButtonAndGetAction()		button_lvl5.DrawButtonAndGetAction()		if key is not None:			run = False		pg.display.update()		pg.time.delay(30)"""images""" Volume_pause_active = pg.image.load("images/Volume_pause_active.png").convert_alpha()Volume_pause_active = pg.transform.scale(Volume_pause_active,(250,250))Volume_play_active = pg.image.load("images/Volume_play_active.png").convert_alpha()Volume_play_active = pg.transform.scale(Volume_play_active,(250,250))Volume_play_inactive = pg.image.load("images/Volume_play_inactive.png").convert_alpha()Volume_play_inactive = pg.transform.scale(Volume_play_inactive,(250,250))Volume_pause_inactive = pg.image.load("images/Volume_pause_inactive.png").convert_alpha()Volume_pause_inactive = pg.transform.scale(Volume_pause_inactive,(250,250))Flask = pg.image.load("images/Flask.png").convert_alpha()Flask = pg.transform.scale(Flask,(60,210))Flask_error = pg.image.load("images/Flask_error.png").convert_alpha()Flask_error = pg.transform.scale(Flask_error,(60,210))Button_play_inactive = pg.image.load("images/Button_play_inactive.png").convert_alpha()Button_play_inactive = pg.transform.scale(Button_play_inactive,(350,350))Button_play_active = pg.image.load("images/Button_play_active.png").convert_alpha()Button_play_active = pg.transform.scale(Button_play_active,(349,349))Button_back_active = pg.image.load("images/Button_back_active.png").convert_alpha()Button_back_active = pg.transform.scale(Button_back_active,(250,250))Button_back_inactive = pg.image.load("images/Button_back_inactive.png").convert_alpha()Button_back_inactive = pg.transform.scale(Button_back_inactive,(249,249))Active_flask_button = pg.image.load("images/Active_flask_button.png").convert_alpha()Active_flask_button = pg.transform.scale(Active_flask_button,(150,150))Inactive_flask_button = pg.image.load("images/Inactive_flask_button.png").convert_alpha()Inactive_flask_button = pg.transform.scale(Inactive_flask_button,(149,149))Button_exit_inactive = pg.image.load("images/Button_exit_inactive.png").convert_alpha()Button_exit_inactive = pg.transform.scale(Button_exit_inactive,(250,250))Button_exit_active = pg.image.load("images/Button_exit_active.png").convert_alpha()Button_exit_active = pg.transform.scale(Button_exit_active,(249,249))Level_menu_text = pg.image.load("images/Level_menu_text.png").convert_alpha()Level_menu_text = pg.transform.scale(Level_menu_text,(350,350))lvl1_active = pg.image.load("images/lvl1_active.png").convert_alpha()lvl1_active = pg.transform.scale(lvl1_active,(350,690))lvl2_active = pg.image.load("images/lvl2_active.png").convert_alpha()lvl2_active = pg.transform.scale(lvl2_active,(350,350))lvl3_active = pg.image.load("images/lvl3_active.png").convert_alpha()lvl3_active = pg.transform.scale(lvl3_active,(350,350))lvl4_active = pg.image.load("images/lvl4_active.png").convert_alpha()lvl4_active = pg.transform.scale(lvl4_active,(350,350))lvl5_active = pg.image.load("images/lvl5_active.png").convert_alpha()lvl5_active = pg.transform.scale(lvl5_active,(350,350))lvl1_inactive = pg.image.load("images/lvl1_inactive.png").convert_alpha()lvl1_inactive = pg.transform.scale(lvl1_inactive,(350,690))lvl2_inactive = pg.image.load("images/lvl2_inactive.png").convert_alpha()lvl2_inactive = pg.transform.scale(lvl2_inactive,(350,350))lvl3_inactive = pg.image.load("images/lvl3_inactive.png").convert_alpha()lvl3_inactive = pg.transform.scale(lvl3_inactive,(350,350))lvl4_inactive = pg.image.load("images/lvl4_inactive.png").convert_alpha()lvl4_inactive = pg.transform.scale(lvl4_inactive,(350,350))lvl5_inactive = pg.image.load("images/lvl5_inactive.png").convert_alpha()lvl5_inactive = pg.transform.scale(lvl5_inactive,(350,350))Button_again_active = pg.image.load("images/Button_again_active.png").convert_alpha()Button_again_active = pg.transform.scale(Button_again_active,(200,200))Button_again_inactive = pg.image.load("images/Button_again_inactive.png").convert_alpha()Button_again_inactive = pg.transform.scale(Button_again_inactive,(200,200))Button_reg_active = pg.image.load("images/Button_reg_active.png").convert_alpha()Button_reg_active = pg.transform.scale(Button_reg_active,(160,160))Button_reg_inactive = pg.image.load("images/Button_reg_inactive.png").convert_alpha()Button_reg_inactive = pg.transform.scale(Button_reg_inactive,(160,160))Win_text = pg.image.load("images/Win_text.png").convert_alpha()Win_text = pg.transform.scale(Win_text,(800,800))rez = (600//10, 780//10)RED = pg.image.load("images/RED.png").convert_alpha()RED = pg.transform.scale(RED,rez)BLUE = pg.image.load("images/BLUE.png").convert_alpha()BLUE = pg.transform.scale(BLUE,rez)GREEN = pg.image.load("images/GREEN.png").convert_alpha()GREEN = pg.transform.scale(GREEN,rez)YELLOW = pg.image.load("images/YELLOW.png").convert_alpha()YELLOW = pg.transform.scale(YELLOW,rez)PINK = pg.image.load("images/PINK.png").convert_alpha()PINK = pg.transform.scale(PINK,rez)PURPLE = pg.image.load("images/PURPLE.png").convert_alpha()PURPLE = pg.transform.scale(PURPLE,rez)SALMON = pg.image.load("images/SALMON.png").convert_alpha()SALMON = pg.transform.scale(SALMON,rez)GRAY = pg.image.load("images/GRAY.png").convert_alpha()GRAY = pg.transform.scale(GRAY,rez)KHAKI = pg.image.load("images/KHAKI.png").convert_alpha()KHAKI = pg.transform.scale(KHAKI,rez)LIME = pg.image.load("images/LIME.png").convert_alpha()LIME = pg.transform.scale(LIME,rez)ORANGE = pg.image.load("images/ORANGE.png").convert_alpha()ORANGE = pg.transform.scale(ORANGE,rez)Reg = pg.image.load("images/Reg.png").convert_alpha()Reg = pg.transform.scale(Reg,(530,705))colors_dict = {"red":RED, 			   "blue":BLUE, 			   "green":GREEN, 			   "yellow":YELLOW, 			   "pink":PINK, 			   "purple":PURPLE, 			   "salmon":SALMON, 			   "gray":GRAY, 			   "khaki":KHAKI, 			   "lime":LIME,			   "orange":ORANGE}THECOLORS = {				"red":(255, 0, 0), 				"blue":(0, 0, 255), 				"green":(0, 128, 0), 				"yellow":(255, 255, 0), 				"pink":(255, 192, 203), 				"purple":(128, 0, 128), 				"salmon":(250, 128, 114), 				"gray":(128, 128, 128), 				"khaki":(240, 230, 140), 				"lime":(0, 255, 0),				"orange":(255, 165, 0)}"""images"""run =Truekey = "main"flaskkey = Noneflasks_activity_list = []volume_key = Truereg_flag = Falsepg.mixer.music.load('c245b81d72ab0bb.mp3')pg.mixer.music.set_volume(0.2)pg.mixer.music.play(-1)click_music = pg.mixer.Sound('69880c1f5e57698.mp3')open_reg = pg.mixer.Sound('open_reg.mp3')close_reg = pg.mixer.Sound('close_reg.mp3')flask_error_sound = pg.mixer.Sound('jg-032316-sfx-feedback-incorrect-6.mp3')flask_error_sound.set_volume(0.4)win_sound = pg.mixer.Sound('cd4a77637618b0c.mp3')water_sound_up = pg.mixer.Sound('1_sound.mp3')water_sound_down = pg.mixer.Sound('2_sound.mp3')while 1:	"""lvl1"""	link_on_lvl1 = "lvl1"	Flasks1_1 = Flasks(width//2-73//2-500//2,320,["green","red","green","red","green"],Flask)	Flasks1_2 = Flasks(width//2-73//2,320,["red","green","red","green","red"],Flask)	Flasks1_3 = Flasks(width//2-73//2+500//2,320,[],Flask)	lvl1 = [Flasks1_1,Flasks1_2,Flasks1_3]	"""lvl2"""	link_on_lvl2 = "lvl2"	Flasks2_1 = Flasks(width//2-73//2-390,320,["orange","orange","red","green","red"],Flask)	Flasks2_2 = Flasks(width//2-73//2-130,320,["green","orange","green","orange","red"],Flask)	Flasks2_3 = Flasks(width//2-73//2+130,320,["green","red","green","orange","red"],Flask)	Flasks2_4 = Flasks(width//2-73//2+390,320,[],Flask)	lvl2 = [Flasks2_1,Flasks2_2,Flasks2_3,Flasks2_4]	"""lvl3"""	link_on_lvl3 = "lvl3"	Flasks3_1 = Flasks(width//2-73//2-400,320,["green","yellow","green","green","red"],Flask)	Flasks3_2 = Flasks(width//2-73//2-200,320,["blue","yellow","red","blue","yellow"],Flask)	Flasks3_3 = Flasks(width//2-73//2,320,["red","blue","blue","red","green"],Flask)	Flasks3_4 = Flasks(width//2-73//2+200,320,["red","yellow","blue","yellow","green"],Flask)	Flasks3_5 = Flasks(width//2-73//2+400,320,[],Flask)	lvl3 = [Flasks3_1,Flasks3_2,Flasks3_3,Flasks3_4,Flasks3_5]	"""lvl4"""	link_on_lvl4 = "lvl4"	Flasks4_1 = Flasks(width//2-73//2-415,320,["orange","gray","orange","gray","gray"],Flask)	Flasks4_2 = Flasks(width//2-73//2-250,320,["gray","orange","orange","purple","pink"],Flask)	Flasks4_3 = Flasks(width//2-73//2-85,320,["blue","blue","blue","blue","purple"],Flask)	Flasks4_4 = Flasks(width//2-73//2+85,320,["gray","orange","purple","pink","pink"],Flask)	Flasks4_5 = Flasks(width//2-73//2+250,320,["blue","pink","pink","purple","purple"],Flask)	Flasks4_6 = Flasks(width//2-73//2+415,320,[],Flask)	lvl4 = [Flasks4_1,Flasks4_2,Flasks4_3,Flasks4_4,Flasks4_5,Flasks4_6]	"""lvl5"""	link_on_lvl5 = "lvl5"	Flasks5_1 = Flasks(width//2-73//2-450,320,["salmon","khaki","red","red","red"],Flask)	Flasks5_2 = Flasks(width//2-73//2-300,320,["khaki","khaki","red","salmon","salmon"],Flask)	Flasks5_3 = Flasks(width//2-73//2-150,320,["pink","pink","lime","khaki","lime"],Flask)	Flasks5_4 = Flasks(width//2-73//2,320,["lime","yellow","salmon","salmon","khaki"],Flask)	Flasks5_5 = Flasks(width//2-73//2+150,320,["yellow","lime","pink","lime","yellow",],Flask)	Flasks5_6 = Flasks(width//2-73//2+300,320,["pink","yellow","pink","yellow","red"],Flask)	Flasks5_7 = Flasks(width//2-73//2+450,320,[],Flask)  	lvl5 = [Flasks5_1,Flasks5_2,Flasks5_3,Flasks5_4,Flasks5_5,Flasks5_6,Flasks5_7]	if key == "main":		Main_Menu()	elif key == "level_menu":		Levels()	elif key == "lvl1":		lvl(lvl1,link_on_lvl1)	elif key == "lvl2":		lvl(lvl2,link_on_lvl2)	elif key == "lvl3":		lvl(lvl3,link_on_lvl3)	elif key == "lvl4":		lvl(lvl4,link_on_lvl4)	elif key == "lvl5":		lvl(lvl5,link_on_lvl5)	elif key == "exit":		pg.quit()		sys.exit()